import { Spline } from "../math/spline";
import Vector from "../math/vector";
import { Beatmap } from ".";
import Hitsound from "./additions";
import { AdditionType, CurveType, HitsoundType } from "./structs";
export declare abstract class HitObject {
    FadeTime: number;
    NewCombo: boolean;
    Hitsound: Hitsound;
    StartTime: number;
    EndTime: number;
    Position: Vector;
    EndPosition: Vector;
    StackHeight: number;
    ComboNumber: number;
    Parent: Beatmap | null;
    constructor(FadeTime: number, NewCombo: boolean, Hitsound: Hitsound, StartTime: number, EndTime: number, Position: Vector, EndPosition: Vector);
    static parseEdgeAdditions(str: string): {
        sample: HitsoundType;
        additions: AdditionType;
    } | null;
    static parse(line: string): HitObject;
    abstract FlipVertical(): void;
}
export declare class HitCircle extends HitObject {
    FlipVertical(): void;
}
export declare class Slider extends HitObject {
    CurveType: CurveType;
    ControlPoints: Vector[];
    Spline: Spline;
    PixelLength: number;
    RepeatCount: number;
    constructor(FadeTime: number, NewCombo: boolean, Hitsound: Hitsound, StartTime: number, EndTime: number, Position: Vector, EndPosition: Vector, CurveType: CurveType, ControlPoints: Vector[], Spline: Spline, PixelLength: number, RepeatCount: number);
    Calculate(): void;
    FlipVertical(): void;
}
export declare class Spinner extends HitObject {
    FlipVertical(): void;
}
