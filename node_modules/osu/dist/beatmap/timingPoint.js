"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
class TimingPoint {
    constructor(Offset, BeatLength, Velocity, Meter, SampleSetId, CustomSampleIndex, SampleVolume, TimingChange, KiaiTimeActive) {
        this.Offset = Offset;
        this.BeatLength = BeatLength;
        this.Velocity = Velocity;
        this.Meter = Meter;
        this.SampleSetId = SampleSetId;
        this.CustomSampleIndex = CustomSampleIndex;
        this.SampleVolume = SampleVolume;
        this.TimingChange = TimingChange;
        this.KiaiTimeActive = KiaiTimeActive;
        this.BPM = 0;
        this.BaseOffset = Offset;
    }
    static parse(line) {
        let parts = line.split(",");
        let offset = parseInt(parts[0]);
        let beatLength = parseFloat(parts[1]);
        let tp;
        if (isNaN(beatLength) || beatLength == 0)
            throw new errors_1.ParseError(`Could not determine timing point type with beatLength = '${parts[1]}'`);
        let BeatLength = beatLength;
        let Meter = parseInt(parts[2]);
        let SampleSetId = parseInt(parts[3]);
        let CustomSampleIndex = parseInt(parts[4]);
        let SampleVolume = parseInt(parts[5]);
        let TimingChange = parseInt(parts[6]) == 1;
        let KiaiTimeActive = parseInt(parts[7]) == 1;
        if (beatLength > 0) {
            tp = new UninheritedTimingPoint(offset, BeatLength, 1, Meter, SampleSetId, CustomSampleIndex, SampleVolume, TimingChange, KiaiTimeActive);
            tp.BPM = Math.round(60000 / beatLength);
        }
        else {
            let Velocity = Math.abs(100 / beatLength);
            tp = new InheritedTimingPoint(offset, BeatLength, Velocity, Meter, SampleSetId, CustomSampleIndex, SampleVolume, TimingChange, KiaiTimeActive);
        }
        return tp;
    }
    serialize() {
        let parts = [];
        return parts.join(",");
    }
}
exports.default = TimingPoint;
class UninheritedTimingPoint extends TimingPoint {
}
exports.UninheritedTimingPoint = UninheritedTimingPoint;
class InheritedTimingPoint extends TimingPoint {
}
exports.InheritedTimingPoint = InheritedTimingPoint;
//# sourceMappingURL=timingPoint.js.map