"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const structs_1 = require("./structs");
function ModActivated(mods, mod) { return (mods & mod) == mod; }
exports.ModActivated = ModActivated;
function AdjustForMods(diff, mods) {
    let approachRate = diff.ApproachRate;
    let circleSize = diff.CircleSize;
    let hpDrain = diff.HPDrainRate;
    let overallDiff = diff.OverallDifficulty;
    if (ModActivated(mods, structs_1.Mods.Easy)) {
        approachRate = Math.max(0, diff.ApproachRate / 2);
        circleSize = Math.max(0, diff.CircleSize / 2);
        hpDrain = Math.max(0, diff.HPDrainRate / 2);
        overallDiff = Math.max(0, diff.OverallDifficulty / 2);
    }
    else if (ModActivated(mods, structs_1.Mods.HardRock)) {
        approachRate = Math.min(10, diff.ApproachRate * 1.4);
        circleSize = Math.min(10, diff.CircleSize * 1.3);
        hpDrain = Math.min(10, diff.HPDrainRate * 1.4);
        overallDiff = Math.min(10, diff.OverallDifficulty * 1.4);
    }
    return {
        ApproachRate: approachRate,
        CircleSize: circleSize,
        HPDrainRate: hpDrain,
        OverallDifficulty: overallDiff,
    };
}
exports.AdjustForMods = AdjustForMods;
function MapDiffRange(diff, min, mid, max) {
    if (diff > 5)
        return mid + (max - mid) * (diff - 5) / 5;
    if (diff < 5)
        return mid - (mid - min) * (5 - diff) / 5;
    return mid;
}
exports.MapDiffRange = MapDiffRange;
function CalculateDifficultyProperties(diff) {
    let adjDiff = AdjustForMods(diff, 0);
    let reactionTime = MapDiffRange(adjDiff.ApproachRate, 1800, 1200, 450);
    let hit300 = MapDiffRange(adjDiff.OverallDifficulty, 80, 50, 20);
    let hit100 = MapDiffRange(adjDiff.OverallDifficulty, 140, 100, 60);
    let hit50 = MapDiffRange(adjDiff.OverallDifficulty, 200, 150, 100);
    return { ReactionTime: reactionTime, Hit300: hit300, Hit100: hit100, Hit50: hit50 };
}
exports.CalculateDifficultyProperties = CalculateDifficultyProperties;
//# sourceMappingURL=utils.js.map